# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Truss < Formula
  desc "Truss helps you build go-kit microservices without having to worry about writing or maintaining boilerplate code"
  homepage "https://github.com/metaverse/truss"
  version "0.2.1"
  bottle :unneeded

  if OS.mac?
    url "https://github.com/metaverse/truss/releases/download/v0.2.1/truss_0.2.1_Darwin_x86_64.tar.gz"
    sha256 "d9e83dfb834d7fc361dda00accb0a6367790c0cdba687a7b47ce43164e2ee0a3"
  end
  if OS.linux? && Hardware::CPU.intel?
    url "https://github.com/metaverse/truss/releases/download/v0.2.1/truss_0.2.1_Linux_x86_64.tar.gz"
    sha256 "efc5dfc50c1b34fceb9d998fa8b58b117049633e5c0426c8125287f98a3181d7"
  end

  depends_on "protobuf"
  depends_on "protoc-gen-gogo"
  depends_on "protoc-gen-gogofaster"

  def install
    bin.install "truss"
  end

  def caveats; <<~EOS
    To leverage truss's annotations you'll need to clone truss into your $(go env GOPATH)
  EOS
  end

  test do
    system "#{bin}/truss --version"
    protofile = testpath/"proto3.proto"
    protofile.write <<~EOS
      syntax = "proto3";
      package proto3;

      service Echo {
        rpc Echo(Request) returns (Request) { }
      }
      message Request {
        string text = 1;
      }
    EOS
    system "#{bin}/truss", "proto3.proto"
    assert_predicate testpath/"proto3.pb.go", :exist?
    assert_predicate testpath/echo-service, :exist?
    refute_predicate (testpath/"proto3.pb.go").size, :zero?
  end
end
